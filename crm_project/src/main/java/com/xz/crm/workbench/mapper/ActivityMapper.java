package com.xz.crm.workbench.mapper;

import com.xz.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 13 12:39:42 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动列表
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String ,Object> map);

    /**
     * 根据条件查询市场活动总记录条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String ,Object> map);


    /**
     * 根据id批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(@Param("ids") String[] ids);

    /**
     * 根据id查询单条市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(@Param("id") String id);

    /**
     * 更新市场活动
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有的市场活动列表
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据条件查询市场活动列表
     * @return
     */
    List<Activity> selectActivitiesByIds(@Param("ids") String[] ids);


    /**
     *批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertActivityByList(@Param("activityList") List<Activity> activityList);

    /**
     * 根据id查询市场活动详细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询关联的市场活动列表
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(@Param("clueId") String clueId);

    /**
     * 根据市场活动名称和关联表中线索id 查询 市场活动信息
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String ,Object> map);


    /**
     * 根据 数组id查询市场活动信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(@Param("ids") String[] ids);

    /**
     * 根据市场的活动名称查询市场活动，并已经关联的线索
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);
}